<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[never615]]></title>
  <subtitle><![CDATA[创造价值]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://never615.com/"/>
  <updated>2016-07-17T17:59:37.000Z</updated>
  <id>http://never615.com/</id>
  
  <author>
    <name><![CDATA[never615]]></name>
    <email><![CDATA[never615@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[android系统类工具的发展情况]]></title>
    <link href="http://never615.com/2016/07/18/android%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8%E7%9A%84%E5%8F%91%E5%B1%95%E6%83%85%E5%86%B5/"/>
    <id>http://never615.com/2016/07/18/android系统类工具应用的发展情况/</id>
    <published>2016-07-17T17:59:38.000Z</published>
    <updated>2016-07-17T17:59:37.000Z</updated>
    <content type="html"><![CDATA[<p>开荒初期,用户有很多需求,android系统本身和rom厂商没有精力一下子做好这么多方面,于是各种类型的系统工具应用百花齐放,解决用户的的需求,提升用户的体验,但是随着时间的推移,对于这些基本需求,rom本身已经解决的越来越好,和第三方优秀应用的差距越来越小,用户下载第三方应用的动力越来越小,这些应用又该何去何从?</p>
<a id="more"></a>
<h1 id="调查案例"><a href="#调查案例" class="headerlink" title="调查案例:"></a>调查案例:</h1><h2 id="快图"><a href="#快图" class="headerlink" title="快图"></a>快图</h2><p>快图浏览卖给了猎豹.</p>
<p>快图以其优秀的体验吸引了很多国内外用户,我在用android手机初期刷cm系统的时候就会装快图,当时使用的是htc的hd2,刷了各种rom之后用的较久的是miui,后来因为应用越来越大,在把大多应用移到sd的情况下,Rom还是一直提示不够用,就刷了CM,2.3的系统.14年的时候,我妈还在用,基本应用还是很流畅,最后是按键是在撑不住了换了.</p>
<p>当时第一次用快图的时候,第一次打开,感觉就是一个字,快,留下了很好的印象,但是后来换几次手机都没有装过快图了,因为系统的已经很好用了.</p>
<p>快图卖给猎豹还是引起了很多粉丝的不快,包括国外的用户发文吐槽.恩,快图应该沦为了猎豹推广云盘的工具了.</p>
<p>其开发者郑南岭的介绍:</p>
<blockquote>
<p>郑南岭，上海人，千千静听(TTPlayer/thousand tunes player)的唯一开发者。开发的其他产品还有千千浏览,快图浏览,QC 归属地. 千千静听被百度收购,快图卖给了猎豹.</p>
</blockquote>
<p><a href="http://www.qishu.co/61e7509405764b03af567af08f83c008#傅盛战队对谈郑南岭 - 千千静听、快图创始人" target="_blank" rel="external">对谈郑南岭</a></p>
<h2 id="猎豹移动"><a href="#猎豹移动" class="headerlink" title="猎豹移动"></a>猎豹移动</h2><p>猎豹移动今年5.19发布16年Q1业绩,并做出了低于预期的第二季度预测,股价大幅下跌.猎豹在过去5年总收入增长均超过100%,2015年收入中海外收入占比50%.2016Q1海外收入增长115.6%,移动收入占比超过七成.</p>
<p>傅盛说明了Q2大幅下调的三个原因:</p>
<ol>
<li>在国际市场，在第三方广告平台上的合作伙伴中，有一些的eCPM（effective cost per mille，指的就是每一千次展示可以获得的广告收入）下降；</li>
<li>在扩大直销（direct sales）方面取得的进展比预期的慢；</li>
<li>在执行内容产品战略方面耗费的时间比预期长。</li>
</ol>
<p>工具类应用的发展在全球范围内还是有空间的,但是工具类应用发展的局限也很大,猎豹的变现道路是有瓶颈的,在去年已经遇到.猎豹目前已经在用户价值较高的内容产品布局超过半年,如游戏别踩白块/musical.ly和新推的头牌;在VR和机器人领域提前布局;和紫牛基金合作. </p>
<p>猎豹已经看到工具类应用的瓶颈,并积极转型.</p>
<h3 id="主要产品"><a href="#主要产品" class="headerlink" title="主要产品"></a>主要产品</h3><ul>
<li>musical.ly :短视频应用,猎豹内容产品,登上全美ios总榜第一.<a href="http://36kr.com/p/5041108.html" target="_blank" rel="external">为什么一个中国团队做的短视频 APP 登上了全美 iOS 总榜第一？</a></li>
<li>别踩白块:轻游戏.</li>
<li>头牌:网红短视频应用</li>
<li>工具类应用产品线,有名的有猎豹清理大师.</li>
</ul>
<h3 id="盈利方式"><a href="#盈利方式" class="headerlink" title="盈利方式"></a>盈利方式</h3><ul>
<li>新推内容产品,提升用户活跃度,需要时间见效果.</li>
<li>加强全球直销运营能力</li>
<li>加速移动广告收入增长 </li>
</ul>
<h2 id="LBE"><a href="#LBE" class="headerlink" title="LBE"></a>LBE</h2><h3 id="主要产品-1"><a href="#主要产品-1" class="headerlink" title="主要产品"></a>主要产品</h3><ul>
<li>安全大师</li>
<li>加速大师</li>
<li>平行空间</li>
</ul>
<h3 id="豌豆荚上安全大师最近一组评价"><a href="#豌豆荚上安全大师最近一组评价" class="headerlink" title="豌豆荚上安全大师最近一组评价"></a>豌豆荚上安全大师最近一组评价</h3><img src="/2016/07/18/android系统类工具应用的发展情况/LBE评论.png" alt="LBE评论.png" title="">
<p>LBE和很多rom厂家合作,这也是很多工具类应用目前的情况.如:360,猎豹清理大师,百度手机卫士,腾讯管家.LBE的股东有阿里,腾讯,小米…</p>
<h2 id="豌豆荚"><a href="#豌豆荚" class="headerlink" title="豌豆荚"></a>豌豆荚</h2><p>豌豆荚是我最喜欢的应用市场,也是我一直使用android手机要下载的,因为我在使用android初期,就经常在市场上找一些好玩的应用.后来用了rom自带的市场,比如魅族的,发现排名靠前的应用都是推广的,而豌豆荚还是一直会推荐优秀的应用的.</p>
<p>并且作为一个开发者,我也感觉到豌豆荚上的自然流量会好一些.</p>
<p>7月5日豌豆荚移动分发业务并入阿里移动.</p>
<h2 id="UC"><a href="#UC" class="headerlink" title="UC"></a>UC</h2><p>2015年8月，UC就推出了基于浏览器的个性化信息流产品——UC头条，但此次推出的“UC订阅号”后，UC将帮助订阅号完成“增粉、变现和运营”。浏览器手握用户及移动互联网重要入口资源，进军内容分发变得水到渠成，据艾媒咨询数据显示，在2015年中国移动资讯行业活跃用户分布方面，腾讯新闻以37.5%的占比排名第一；网易新闻和UC头条以32.3%和31.3%的占比分别排名二、三位。UC头条跻身内容分发市场前三。</p>
<h2 id="360"><a href="#360" class="headerlink" title="360"></a>360</h2><p>转型IOT.</p>
<p>360出去的李涛创办的apus,专注海外市场;,做系统工具应用,最有名的是用户系统.apus在20个月内获得9亿用户,并且主要是海外用户.</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>说一下我目前的情况,目前主要使用的手机是ios,装了墨迹天气和中华万年历,如果我用的是小米和魅族的话是不会装他们的.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>系统工具类app(安全管家类\桌面\市场等)的国内用户量未来趋势是逐年下降的.</p>
<ol>
<li>随着时间的推移,从android2.+到4.+到现在的5.+和6.+,定制rom自带的工具应用从无到有已经越来越好用,和第三方的差距逐渐缩小,并且通过和第三方合作,只是用第三方的服务在自己的rom中.</li>
<li>rom携带的应用整合度更高,即便使用性上有差距,但是随着差距的缩小,用户渐渐不在下载各种第三方替代品,或者下载第三方替代品的趋势逐渐下降.</li>
<li>目前工具类应用的主要市场应该是在于定制化较低的rom上.</li>
<li>现阶段工具类应用想继续取得用户增长,我觉得是国际化,apus的发展就是很好的例子.</li>
<li>和rom厂商合作也是一条路.但是也要看厂商是否愿意合作还是想自己做,rom厂商一开始就在自己做市场应用,尽管做的比豌豆荚难用很多很多,所以有些应用rom厂商还是想自己做.合作的话怎么合作利益怎么共享,工具类应用不像游戏,很好变现,谈不好合作还不如自己做.<br>我的观点是随着时间的发展,工具类大多数是原生吃定制rom,定制rom吃工具应用.原生吃定制rom这事还早,后还不知道会怎么样,定制rom吃工具类应用我觉得是一定的.三星现在也开始发力中国本土化了.</li>
</ol>
<blockquote>
<p>下一篇研究互联网公司进军海外的情况.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>开荒初期,用户有很多需求,android系统本身和rom厂商没有精力一下子做好这么多方面,于是各种类型的系统工具应用百花齐放,解决用户的的需求,提升用户的体验,但是随着时间的推移,对于这些基本需求,rom本身已经解决的越来越好,和第三方优秀应用的差距越来越小,用户下载第三方应用的动力越来越小,这些应用又该何去何从?</p>]]>
    
    </summary>
    
      <category term="调查" scheme="http://never615.com/tags/%E8%B0%83%E6%9F%A5/"/>
    
      <category term="随笔" scheme="http://never615.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://never615.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS7.0下搭建nginx+php7+postgresql+laravel的运行环境]]></title>
    <link href="http://never615.com/2016/05/28/CentOS7.0%E4%B8%8B%E6%90%AD%E5%BB%BAnginx+php7+postgresql+laravel%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    <id>http://never615.com/2016/05/28/CentOS7.0下搭建nginx+php7+postgresql+laravel的运行环境/</id>
    <published>2016-05-28T04:37:37.000Z</published>
    <updated>2016-05-28T04:37:37.000Z</updated>
    <content type="html"><![CDATA[<p>只讲述如何配置一个laravel应用可以运行的基本环境，其他的如权限管理、禁止root远程登录、ssh密码登录、防火墙等不涉及。<br>这些东西配置下来给我最大的感悟就是,首先去查官网资料…<br><a id="more"></a></p>
<p>安装步骤大体分为以下几步：</p>
<ol>
<li>基本环境配置</li>
<li>安装php-fpm（同时安装了php） </li>
<li>安装composer</li>
<li>安装postgresql并配置</li>
<li>安装nginx</li>
<li>创建一个laravel应用并配置nginx</li>
</ol>
<h2 id="CentOs基本环境配置"><a href="#CentOs基本环境配置" class="headerlink" title="CentOs基本环境配置"></a>CentOs基本环境配置</h2><p>在CentOS上管理软件可以使用yum作为包管理工具，可以用命令查询、删除、下载、安装、删除系统上的软件。</p>
<p>yum的使用：<a href="https://access.redhat.com/sites/default/files/attachments/rh_yum_cheatsheet_1214_jcs_print-1.pdf" target="_blank" rel="external">yum参考手册</a></p>
<p>系统官方的资源库提供的软件不能满足我们的需求，比如搜索php70u，会提示NO Matches found，所以我们要添加额外的资源库。</p>
<p>在这里可以找到ius的包，<a href="https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/repoview/ius-release.html" target="_blank" rel="external">https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/repoview/ius-release.html</a>。</p>
<p>复制包地址，使用wget下载，会下载到当前目录。</p>
<pre><code>wget https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-14.ius.centos7.noarch.rpm
</code></pre><p>然后使用命令安装：</p>
<pre><code>rpm -ivh ius-release-1.0-10.ius.el6.noarch.rpm epel-release-6-5.noarch.rpm
</code></pre><p>如果安装失败，提示你安装epel,就用yum search epel，然后安装。</p>
<h2 id="安装php-fpm和php-安装php常用扩展"><a href="#安装php-fpm和php-安装php常用扩展" class="headerlink" title="安装php-fpm和php,安装php常用扩展"></a>安装php-fpm和php,安装php常用扩展</h2><p>搜索php-fpm：</p>
<pre><code>yum search php70u-fpm
</code></pre><p>安装，因为yum会自动解决软件之间的依赖，所以会自动安装php</p>
<pre><code>yum install php70u-fpm
</code></pre><p>查看php-fpm的状态：</p>
<pre><code>systemctl status php-fpm
</code></pre><p>启动php——fpm:</p>
<pre><code>systemctl start php-fpm
</code></pre><p>设置开机启动：</p>
<pre><code>systemctl enable php-fpm
</code></pre><p>安装php常用的扩展：</p>
<pre><code>yum install php70u-gd php70u-mysqlnd php70u-pdo php70u-mcrypt php70u-mbstring php70u-json php70u-cli -y
</code></pre><p>安装完成需要重新加载php-fpm:</p>
<pre><code>systemctl reload php-fpm
</code></pre><h2 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h2><p>composer是php中管理依赖的工具<a href="https://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">官网</a></p>
<pre><code>php -r &quot;copy(&apos;https://getcomposer.org/installer&apos;, &apos;composer-setup.php&apos;);&quot;
php -r &quot;if (hash_file(&apos;SHA384&apos;, &apos;composer-setup.php&apos;) === &apos;92102166af5abdb03f49ce52a40591073a7b859a86e8ff13338cf7db58a19f7844fbc0bb79b2773bf30791e935dbd938&apos;) { echo &apos;Installer verified&apos;; } else { echo &apos;Installer corrupt&apos;; unlink(&apos;composer-setup.php&apos;); } echo PHP_EOL;&quot;
php composer-setup.php
php -r &quot;unlink(&apos;composer-setup.php&apos;);&quot;
</code></pre><p>这几条命令的意思就是：下载；校验；安装；删除安装包；</p>
<p>在国内使用composer如果没有翻墙的话，可以使用镜像。<a href="http://pkg.phpcomposer.com/" target="_blank" rel="external">镜像地址</a></p>
<h2 id="安装postgresql并配置"><a href="#安装postgresql并配置" class="headerlink" title="安装postgresql并配置"></a>安装postgresql并配置</h2><p>直接使用yum安装地方postgres不是最新的，一些新特性无法使用，建议按<a href="http://www.postgresql.org/download/linux/redhat/" target="_blank" rel="external">官网</a>教程安装最新版。</p>
<pre><code>yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm
</code></pre><p>完成之后：</p>
<pre><code>yum install postgresql94-server postgresql94-contrib
/usr/pgsql-9.4/bin/postgresql94-setup initdb
systemctl enable postgresql-9.4.service
systemctl start postgresql-9.4.service
yum install php70u-pgsql
</code></pre><p>查看是否安装成功：</p>
<pre><code>rpm -aq|grep postgres
</code></pre><p>配置:<br>postgres安装完成之后会生成名为postgres的数据库、数据库用户和linux系统用户</p>
<ul>
<li><p>切换到postgres用户：</p>
<pre><code>sudo su - postgres
</code></pre></li>
<li><p>使用psql命令登录PostgreSQL：</p>
<pre><code>psql
</code></pre></li>
</ul>
<p>这时相当于系统用户postgres以同名数据库用户的身份，登录数据库，这是不用输入密码的。如果一切正常，系统提示符会变为”postgres=#”，表示这时已经进入了数据库控制台。以下的命令都在控制台内完成。</p>
<ul>
<li><p>第一件事是使用\password命令，为postgres用户设置一个密码。</p>
<pre><code>\password postgres
</code></pre></li>
<li><p>创建数据库用户dbuser，并指定其为超级用户 </p>
<pre><code>sudo -u postgres createuser --superuser dbuser
</code></pre></li>
<li><p>登录数据库控制台，设置dbuser用户的密码，完成后退出控制台（postgres安装完成之后会生成名为postgres的数据库、数据库用户和linux系统用户）psql命令是登录PostgreSQL控制台</p>
<pre><code> sudo -u postgres psql
\password dbuser
\q
</code></pre></li>
<li><p>创建数据库exampledb，并指定所有者为dbuser</p>
<pre><code>sudo -u postgres createdb -O dbuser exampledb
</code></pre></li>
</ul>
<p>我是使用Navicat Premium和Postico作为数据库管理软件的。Postico更轻，查看修改数据比较方便，Navicat功能比较强大。</p>
<h3 id="数据库直接安装完成之后是不能远程访问的，如果需要远程访问的话，需要配置一下："><a href="#数据库直接安装完成之后是不能远程访问的，如果需要远程访问的话，需要配置一下：" class="headerlink" title="数据库直接安装完成之后是不能远程访问的，如果需要远程访问的话，需要配置一下："></a>数据库直接安装完成之后是不能远程访问的，如果需要远程访问的话，需要配置一下：</h3><p>修改postgresql.conf和pg_hba.conf这两个文件。</p>
<p>可以使用locate命令定位这两个文件，updatedb命令可以更新locate文件，如果刚安装完没有找到这两个文件，可以调用这个命令刷新一下。</p>
<ul>
<li><p>postgresql.conf配置</p>
<pre><code>listen_addresses = &apos;*&apos;     //监听所有ip的连接，默认是本机  
port = 5432             //这个不开也行，默认就是5432端口
</code></pre></li>
<li><p>pg_hba.conf配置</p>
<pre><code>配置host    all         all         0.0.0.0/0             trust
</code></pre></li>
<li>如果配置防火墙，记得开放端口</li>
</ul>
<p>修改完记得重启。</p>
<h2 id="安装nginx并配置"><a href="#安装nginx并配置" class="headerlink" title="安装nginx并配置"></a>安装nginx并配置</h2><p><a href="http://nginx.org/en/linux_packages.html" target="_blank" rel="external">nginx官网安装教程</a></p>
<p>想安装最新nginx，我们需要先添加nginx的库。</p>
<p>创建文件/etc/yum.repos.d/nginx.repo，并写入以下内容：</p>
<pre><code>[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/mainline/centos/OSRELEASE/7/
gpgcheck=0
enabled=1    
</code></pre><p>或者使用rpm安装：</p>
<pre><code>rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
</code></pre><p>然后使用yum命令安装nginx即可。</p>
<h2 id="创建一个laravel应用并配置nginx"><a href="#创建一个laravel应用并配置nginx" class="headerlink" title="创建一个laravel应用并配置nginx"></a>创建一个laravel应用并配置nginx</h2><p><a href="https://laravel.com/docs/5.2" target="_blank" rel="external">laravel官方文档</a></p>
<ul>
<li>先通过composer下载laravel<code>composer global require &quot;laravel/installer&quot;</code></li>
<li>创建一个laravel项目<code>composer create-project --prefer-dist laravel/laravel blog</code></li>
</ul>
<p>简单的nginx配置使其可以访问laravel应用：<br>配置文件在/etc/nginx/conf.d目录下。一个基本的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server &#123;&#10;   listen 81;&#10;   server_name www.laravel.com;     &#10;   root /data1/www/laravelapps/app/blog/public;&#10;   index index.php index.html index.htm;&#10;&#10;   location / &#123;&#10;        try_files $uri $uri/ /index.php?$query_string;&#10;   &#125;&#10;&#10;   location ~ \.php$ &#123;&#10;    &#9;fastcgi_pass   127.0.0.1:9000;&#10;    &#9;fastcgi_index  index.php;&#10;      fastcgi_param  SCRIPT_FILENAME  $document_root&#9;&#9;$fastcgi_script_name;&#10;      include        fastcgi_params;&#10;      fastcgi_param   SCRIPT_NAME  $fastcgi_script_name;     &#10;   &#125;&#10;&#125;&#10;&#10;`</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>只讲述如何配置一个laravel应用可以运行的基本环境，其他的如权限管理、禁止root远程登录、ssh密码登录、防火墙等不涉及。<br>这些东西配置下来给我最大的感悟就是,首先去查官网资料…<br>]]>
    
    </summary>
    
      <category term="centos" scheme="http://never615.com/tags/centos/"/>
    
      <category term="web环境搭建" scheme="http://never615.com/tags/web%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="web" scheme="http://never615.com/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[项目总结、阶段小结]]></title>
    <link href="http://never615.com/2016/04/06/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://never615.com/2016/04/06/项目总结/</id>
    <published>2016-04-05T17:30:26.000Z</published>
    <updated>2016-04-05T17:30:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>距离上一个项目大体完成已经有一段时间了，一直说总结一下却一直拖着，最近已经开始php的学习了，觉得实在不能再拖了，需要对上一个阶段总结一下，然后好好的开始下一个阶段了。<br><a id="more"></a></p>
<h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2></blockquote>
<p>项目的架构参考的是<a href="http://zhuanlan.zhihu.com/p/20001838" target="_blank" rel="external">简洁架构</a>(我最早就是在这个文章看到的介绍，真正使用已经是15年9月低了)，P层使用的是MVP。</p>
<img src="/2016/04/06/项目总结/架构1.png" alt="架构1.png" title="">
<img src="/2016/04/06/项目总结/架构2.png" alt="架构2.png" title="">
<p>实践的结果还是十分满意的，项目的结构很清晰，各层各司其职，井井有条。并且我开始习惯写接口，使用抽象的逻辑先完成整个框架的搭建，具体的实现分成一个一个的任务，可以让实现具体功能的人不用理解整个复杂的业务流程，也能保证开发的顺利进行。大大保证了项目的质量和开发的效率。</p>
<p>当然中间也有崎岖探索，随着一步步的实践，自己的理解也慢慢加深。当初开始使用的时候和后期项目差不多完成的时候，我又看了很多项目和架构的文章代码。领域驱动设计、mvvm、变形的mvp、插件化开发、跨平台等等。</p>
<p>到此我才越来越觉得编程思想的相通，越来越多的看到的东西并不是android圈或者纯android开发者的讨论了，很多web开发者的文章讨论。在web中早已经使用的IOC、数据绑定、mvvm等等再android开发中也渐渐的开始讨论到越来越多、使用的越来越多。</p>
<p>而这些在我近期开始php学习的时候也愈发显现出来，让我可以更快的接收概念理解上手。</p>
<h2 id="第三方轮子"><a href="#第三方轮子" class="headerlink" title="第三方轮子"></a>第三方轮子</h2><p>因为是小公司，所以基础库都是一些主流的轮子。</p>
<ul>
<li>图片库使用谷歌推荐的glide，facebook的fresco也很不错，但是我现在没有时间去研究它；</li>
<li>网络库使用retrofit+okhttp（缓存使用okhttp自带的缓存处理，<a href="http://www.jianshu.com/p/9c3b4ea108a7" target="_blank" rel="external">可以参考我之前的文章</a>）；</li>
<li>响应式编程RxJava（给我带来了新的编程思考方式，Everything is a stream.）</li>
<li>依赖注入的dagger2，刚开始的时候真的是一头雾水，因为不太明白依赖注入是个什么东西，做web开发的同学应该对依赖注入司空见惯了吧。特别是我前一段时间封装sdk，抽离dagger，又开始大量new对象的时候，更是觉得dagger的舒服。</li>
<li>数据库greendao，你需要建一个java工程写一些配置约束的代码，然后就可以帮你生成dao和model，真是太方便了，没有反射效率也高。</li>
<li>事件总线使用的是androidEventBus，注意不是greenrobot的eventbus。</li>
<li>印象笔记的android-job用来处理后台事件，它会根据android版本的不同来调用obScheduler, GcmNetworkManager 或者 AlarmManager。</li>
<li>还有一些小库如：处理日志logger、键值对存储的Hawk、注解绑定事件和方法的butterKnife，都是很好用的。</li>
<li>室内定位服务组件：室内定位、室内地图、室内导航，有业务需求的欢迎联系我。</li>
</ul>
<h2 id="一些项目总结"><a href="#一些项目总结" class="headerlink" title="一些项目总结"></a>一些项目总结</h2><ul>
<li>架构不是来限制你的，是来帮助你的，所以千万不要本末倒置，要活学活用。（在初期基本是邯郸学步，有样学样，即便是感觉这样做很不爽了，也还在坚持这样做。不过后来终于想通了，按照自己的想法理解开始改造，最后结果是：随着业务的不断扩大复杂，终于明白为什么有些要那么做，哈哈，不过也有很多改的对的，总之就是要知行合一！）</li>
<li>父级P类不用写resume和pause方法，因为很多情况是不需要这两个方法的；</li>
<li>父级P写setView（设置view接口）和initData，这两个是所有P都要实现的，所以写到父级；为什么不合并这两个，因为对象的初始化在setView中，是一次就够了，但是initData不一定，比如可能要在onNewIntent中调用。</li>
<li>每个module配置自己的混淆文件,方便管理，在application的pro_guard_rules配置也可以，但是当module不用时appliction会产生冗余配置还要处理。</li>
<li>每个module配置自己的依赖，为了高内聚，并且打包的时候并不会重复打包不同module之间的相同引用。</li>
<li>所有的跳转都要走navigator,（navigator是统一处理页面跳转的类）</li>
</ul>
<h2 id="一些好用的东西"><a href="#一些好用的东西" class="headerlink" title="一些好用的东西"></a>一些好用的东西</h2><ul>
<li>使用AndroidStudio进行开发，有很多朋友的公司还在使用eclipse开发，听着就替他揪心。<h3 id="AndroidStudio插件"><a href="#AndroidStudio插件" class="headerlink" title="AndroidStudio插件"></a>AndroidStudio插件</h3></li>
<li>.ignore ，当然同系的软件都可以用，想PhpStorm、IntelliJ、WebStorm等。</li>
<li>Android  ButterKnife Zelezny （AndroidStudio插件）这个是配合 ButterKnife使用的，让你从findviewbyid中解脱，当然如果你使用databinding的话，也不用findviewbyid了。。</li>
<li>GsonFormat 让你从写json相关的实体类中解脱</li>
<li>WakaTime <a href="https://wakatime.com/dashboard" target="_blank" rel="external">这是他的网站</a>，统计你各种编程的时间。<h3 id="AndroidStudio使用"><a href="#AndroidStudio使用" class="headerlink" title="AndroidStudio使用"></a>AndroidStudio使用</h3></li>
<li>AndroidStudio setting Http Proxy 选择sockets，配置127.0.0.1 1080配合ShadowSocks使用</li>
<li>配置使用代码模板，团队模板要统一。</li>
<li>commed+f12 查看结构</li>
<li>F3 代码加书签，commed+F3</li>
<li>alt+commed+t 配置代码包裹</li>
<li>commed+alt+B 查看方法的实现</li>
<li>commed+U 查看方法的抽象方法（接口写多了，这一对还是很常用的）<h3 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h3></li>
<li>Postman 一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</li>
<li>ChromeADB</li>
<li>OneTab 可以帮你把打开的很多网页收起来存着，很方便。在windows上用chrome打开太多页面会很占资源变卡，但是在mac上感觉还好。(顺便推荐mac pro做开发，真的好用)</li>
<li>Octotree 浏览github代码的时候，左侧可以树桩浏览目录结构，十分方便。</li>
<li>JSONView 格式化json数据</li>
<li>有道词典 英语不好的，经常查单词太慢，用这个还是很好用的。</li>
<li>Vysor 同步android手机画面，并且可以控制，记得大学答辩的时候用的一个延迟好大，这个延迟很低。<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3></li>
<li><a href="www.versioneye.com">versioneye</a> 项目中引用了很多第三方库，他可以提醒你哪些库可以升级了，我的项目所有依赖都配置在dependencies.gradle中，我把这个文件上传上去就识别了，但是库好像不全。。其他项目像php的也都可以使用。</li>
<li>mac软件推荐到 www.ifunmac.com，虽然是要收费的，但是不贵还是很值的，省去了找软件的时间，并且更新很快。</li>
<li>No Sleep 让你的mac不sleep</li>
<li>如果你在找一个地方写博客的话，我推荐简书。</li>
<li>笔记是积累，博客是沉淀，我一直在用为知笔记，mac版的不如windows的好用，你也可以尝试印象笔记等。我也试过<a href="http://dynalon.github.io/mdwiki/#!index.md" target="_blank" rel="external">mdwiki</a>和<a href="http://tiddlywiki.com/" target="_blank" rel="external">tiddlywiki.com</a>,但是感觉不如为知笔记好用，主要效率就差很多。位置笔记各个平台上也都有客户端让你的体验更好。</li>
<li><a href="https://get.fabric.io/android?locale=zh-cn" target="_blank" rel="external">fabric</a>Twitter的移动应用开发平台。我在androidStudio装插件一直登陆不上。。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>距离上一个项目大体完成已经有一段时间了，一直说总结一下却一直拖着，最近已经开始php的学习了，觉得实在不能再拖了，需要对上一个阶段总结一下，然后好好的开始下一个阶段了。<br>]]>
    
    </summary>
    
      <category term="mvp" scheme="http://never615.com/tags/mvp/"/>
    
      <category term="简洁架构" scheme="http://never615.com/tags/%E7%AE%80%E6%B4%81%E6%9E%B6%E6%9E%84/"/>
    
      <category term="android" scheme="http://never615.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux下使用gcc编译so库]]></title>
    <link href="http://never615.com/2016/03/17/linux%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E7%BC%96%E8%AF%91so%E5%BA%93/"/>
    <id>http://never615.com/2016/03/17/linux下使用gcc编译so库/</id>
    <published>2016-03-17T15:11:00.000Z</published>
    <updated>2016-03-17T15:11:00.000Z</updated>
    <content type="html"><![CDATA[<p>最近公司在做微信端的定位和导航，所以需要云端提供导航和定位功能，为了复用之前客户端的代码，所以我需要把c文件编译成linux下可以运行的so库，记录一下过程。</p>
<a id="more"></a>
<p>由于没有搞过，所以遇到问题也不知道具体是哪里的问题，所以就一路乱试。。。最后试了下，可以用。</p>
<h3 id="用到的一些gcc命令"><a href="#用到的一些gcc命令" class="headerlink" title="用到的一些gcc命令"></a>用到的一些gcc命令</h3><blockquote>
<p>-shared:指定生成动态连接库,不用该标志外部程序无法连接。相当于一个可执行文件(我开始没加这个，报错找不到main)</p>
<p>-fPIC:表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。</p>
<p>-I:指定头文件所在的文件夹</p>
</blockquote>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="编译时报错：找不到jni-h"><a href="#编译时报错：找不到jni-h" class="headerlink" title="编译时报错：找不到jni.h"></a>编译时报错：找不到jni.h</h4><p>我用虚拟机装了Ubuntu，输入java没有找到，然后按着提示随便装了一个。。。<br>当然我现在知道装的是OpenJDK(<a href="https://www.zhihu.com/question/19646618" target="_blank" rel="external">OpenJDK和SunJDK的区别</a>)，google也决定在android N中使用OpenJDK了(<a href="http://www.infoq.com/cn/news/2016/01/android-openjdk" target="_blank" rel="external">相关报道</a>)。。</p>
<p>所以我又下载了SunJDK，编译的时候要引用相关文件,加如下命令</p>
<pre><code>-I/[jdk目录]/include -I/[jdk目录]/include/linux
</code></pre><p>[jdk目录]/include是jni.h所在目录；<br>[jdk目录]/include/linux是jni_md.h所在目录</p>
<h4 id="编译报错：找不到main"><a href="#编译报错：找不到main" class="headerlink" title="编译报错：找不到main"></a>编译报错：找不到main</h4><p>没有加命令 -shared(命令介绍参考上面)</p>
<h4 id="编译时报错：找不到math-h"><a href="#编译时报错：找不到math-h" class="headerlink" title="编译时报错：找不到math.h"></a>编译时报错：找不到math.h</h4><p>使用math.h中声明的库函数，gcc命令行必须加-lm选项，因为数学函数位于libm.so库文件中（这些库文件通常位于/lib目录下），-lm选项告诉编译器，我们程序中用到的数学函数要到这个库文件里找。</p>
<p>我最后是把c文件一个一个编译成.o然后，然后在编译成.so的，因为怕出错，不知道哪个文件的问题。。。当然也可以直接一句话如下：</p>
<pre><code>gcc [.c文件，多个用空格隔开] -fPIC -shared -I/usr/xxx/include -I/usr/xxx/include/linux -lm -o libtest.so
</code></pre><p>编译成.o命令:gcc -c test.c</p>
<p>.o编译成.so:gcc test.o -o test(默认会添加lib前缀和.so后缀)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近公司在做微信端的定位和导航，所以需要云端提供导航和定位功能，为了复用之前客户端的代码，所以我需要把c文件编译成linux下可以运行的so库，记录一下过程。</p>]]>
    
    </summary>
    
      <category term="gcc" scheme="http://never615.com/tags/gcc/"/>
    
      <category term="so库" scheme="http://never615.com/tags/so%E5%BA%93/"/>
    
      <category term="linux" scheme="http://never615.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个人小站建站记]]></title>
    <link href="http://never615.com/2016/02/26/%E4%B8%AA%E4%BA%BA%E5%B0%8F%E7%AB%99%E5%BB%BA%E7%AB%99%E8%AE%B0/"/>
    <id>http://never615.com/2016/02/26/个人小站建站记/</id>
    <published>2016-02-25T17:38:25.000Z</published>
    <updated>2016-02-25T17:38:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="个人小站建站记"><a href="#个人小站建站记" class="headerlink" title="个人小站建站记"></a>个人小站建站记</h1><blockquote>
<p>折腾了两天终于搭起了自己的第一个站点，恩，一件让我充满幸福感的事☺️。</p>
</blockquote>
<p>小站是用git page和hexo搭建的，使用的的主题是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>。我选择主题最重要的标准就是文章的目录好不好用，哈哈，所以看了很多之后选择了这个。</p>
<a id="more"></a>
<p>未来计划业余技术时间主要在以下两个个方面，这些也将伴随着小站内容的丰富。</p>
<p><strong>web</strong></p>
<p>最近也计划复习复习web并加深学习一下，一来是为了自己玩的更爽，二来是因为随着学习的深入，越来越发觉编程思想的相通，而相比android，web发展则要久远的多，过去一段时间在android圈一个一个火起来的东西，思想在web圈由来已有，三来也是为之后跨平台的学习做一个铺垫。</p>
<p><strong>android</strong></p>
<p>此外也计划把之前学习的android知识在系统的整理一下，同时也买了两本android的书和一本讲android源码设计模式的，当做工具书和查漏补缺，完善我的知识体系，我是比较喜欢记笔记的，人生苦短，我可不想全部都装脑子里。。。如果用的比较少忘记了，很快查一下笔记就好了。</p>
<img src="/2016/02/26/个人小站建站记/ScreenShot.png" alt="ScreenShot.png" title="">
<p><em>主要精力应该还是在android这边，android这边感觉现在有点瓶颈，主要应该是积累的还不够，导致最近在插件化方面的研究有些吃力</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="个人小站建站记"><a href="#个人小站建站记" class="headerlink" title="个人小站建站记"></a>个人小站建站记</h1><blockquote>
<p>折腾了两天终于搭起了自己的第一个站点，恩，一件让我充满幸福感的事☺️。</p>
</blockquote>
<p>小站是用git page和hexo搭建的，使用的的主题是<a href="https://github.com/iissnan/hexo-theme-next">NexT</a>。我选择主题最重要的标准就是文章的目录好不好用，哈哈，所以看了很多之后选择了这个。</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://never615.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://never615.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
